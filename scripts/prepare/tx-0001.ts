import hre from 'hardhat';
import assert from 'assert';
import { getTimelock, prepareTimelockData } from '../prepare-timelock';
import { mockExecuteTimelock } from '../mock-exec-timelock';
import { ContractTransaction } from 'ethers';

const job = async () => {
  assert(hre.network.name === 'mainnet' || hre.network.name === 'hardhat', 'not mainnet');
  console.log('using network', hre.network.name);
  const timelock = await getTimelock(hre, '0x00000Ab6Ee5A6c1a7Ac819b01190B020F7c6599d');
  const pool = await hre.ethers.getContractAt('Pool', '0xD3a4DA66EC15a001466F324FA08037f3272BDbE8');
  const acl = await hre.ethers.getContractAt(
    'ACLManager',
    '0x6C9E32e37F3377D1824304f80bD135be85f5C8c8'
  );

  const hwWallet = '0x6aac0942B8147BffAB73789a82EE12fDA7735BAc';
  const safe = '0x4E88E72bd81C7EA394cB410296d99987c3A242fE';
  const listingContract = '0x43CcF5E5F694E15Ec159bC7112c6119bac84f79e';

  const listingContractsToRemove = [
    '0x7Bc85b5181184E9e5cF4F832B43a770E324C8AD7',
    '0x665e47e41006F7a96e101AbEDb73fF09A7776fbF',
    '0xC4FCEa208CFd121f270f65B8ce002D94e41524Fd',
  ];

  const aclManagers = [
    '0x6C9E32e37F3377D1824304f80bD135be85f5C8c8',
    '0x984A0d2F68bE59FAD746A6d15B811Febf34461f4',
    '0x749dF84Fd6DE7c0A67db3827e5118259ed3aBBa5',
  ];

  const txs: ContractTransaction[] = [];

  // remove old listing contracts from all ACLs
  for (const oldListingContract of listingContractsToRemove) {
    for (const aclManager of aclManagers) {
      const acl = await hre.ethers.getContractAt('ACLManager', aclManager);
      txs.push(await acl.removePoolAdmin.populateTransaction(oldListingContract));
    }
  }

  // add new listing contract to all ACLs
  for (const aclManager of aclManagers) {
    const acl = await hre.ethers.getContractAt('ACLManager', aclManager);
    txs.push(await acl.addPoolAdmin.populateTransaction(listingContract));
    txs.push(await acl.removeAssetListingAdmin.populateTransaction(safe));
    txs.push(await acl.addRiskAdmin.populateTransaction(safe));
    txs.push(await acl.addRiskAdmin.populateTransaction(hwWallet));
    txs.push(await acl.addEmergencyAdmin.populateTransaction(hwWallet));
    txs.push(await acl.addEmergencyAdmin.populateTransaction(safe));
  }

  // listing of stUSDA
  txs.push({
    to: listingContract,
    data: '0x107eef45000000000000000000000000e3c3c5ead58fc2bed4e577e38985b8f7f1ddff00000000000000000000000000000000000000000000000000000000000000018000000000000000000000000008e8ec507968185efb94efd2d355f9932a0f75510000000000000000000000000022228a2cc5e7ef0274a7baa600d44da5ab57760000000000000000000000000000000000000000000000000000000000002328000000000000000000000000000000000000000000000000000000000000251c00000000000000000000000000000000000000000000000000000000000028a0000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000004c4b4000000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000003fafa5171dee3c3341a12942593199644983e16a00000000000000000000000090aa23e0eeeeedf398a1d5cca7fb3e47b75b055c0000000000000000000000007b9d0d6406a2274bec6f35c15f860cc66fbbff1100000000000000000000000000000000000000000000000000000000000000120000000000000000000000006b534c6904ee137b021490622a24c8fff89f5a630000000000000000000000000022228a2cc5e7ef0274a7baa600d44da5ab57760000000000000000000000004e88e72bd81c7ea394cb410296d99987c3a242fe000000000000000000000000bc2fdc58e3e06d265b46e32771442b7f5098725b00000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000000145a65726f4c656e64205374616b6564205553444100000000000000000000000000000000000000000000000000000000000000000000000000000000000000077a30737455534400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f5a65726f4c656e64207a6b205661726961626c6520446562742073745553440000000000000000000000000000000000000000000000000000000000000000137661726961626c65446562747a30737455534400000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d5a65726f4c656e64207a6b20537461626c6520446562742073745553440000000000000000000000000000000000000000000000000000000000000000000011737461626c65446562747a30737455534400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000',
  });

  // listing of USD0++ PT
  txs.push({
    to: listingContract,
    data: '0x107eef45000000000000000000000000e3c3c5ead58fc2bed4e577e38985b8f7f1ddff000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000ad55b868d30866457aaedc65e1c3cdfa098f4ac20000000000000000000000005bae9a5d67d1ca5b09b14c91935f635cfbf3b6850000000000000000000000000000000000000000000000000000000000002328000000000000000000000000000000000000000000000000000000000000251c00000000000000000000000000000000000000000000000000000000000028a00000000000000000000000000000000000000000000000000000000000989680000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000003fafa5171dee3c3341a12942593199644983e16a00000000000000000000000090aa23e0eeeeedf398a1d5cca7fb3e47b75b055c0000000000000000000000007b9d0d6406a2274bec6f35c15f860cc66fbbff1100000000000000000000000000000000000000000000000000000000000000120000000000000000000000006b534c6904ee137b021490622a24c8fff89f5a630000000000000000000000005bae9a5d67d1ca5b09b14c91935f635cfbf3b6850000000000000000000000004e88e72bd81c7ea394cb410296d99987c3a242fe000000000000000000000000bc2fdc58e3e06d265b46e32771442b7f5098725b00000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000001c5a65726f4c656e6420505420555344302b2b2032374d4152323032350000000000000000000000000000000000000000000000000000000000000000000000157a3050542d555344302b2b2d32374d4152323032350000000000000000000000000000000000000000000000000000000000000000000000000000000000002d5a65726f4c656e64207a6b205661726961626c6520446562742050542d555344302b2b2d32374d4152323032350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000217661726961626c65446562747a3050542d555344302b2b2d32374d41523230323500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002b5a65726f4c656e64207a6b20537461626c6520446562742050542d555344302b2b2d32374d415232303235000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f737461626c65446562747a3050542d555344302b2b2d32374d4152323032350000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000',
  });

  // update delay to 3 days
  txs.push(await timelock.updateDelay.populateTransaction(86400 * 3));

  const tx = await prepareTimelockData(hre, safe, txs, timelock.target);
  const reservesCount = await pool.getReservesCount();

  await mockExecuteTimelock(tx.schedule, tx.execute, 86400 * 5, 'mainnet', async () => {
    console.log(
      'listing contract is pool admin after execution',
      await acl.isPoolAdmin(listingContract)
    );

    // now stUSDA & USD0++ PT must be listed
    console.log('timelock delay after execution:', (await timelock.getMinDelay()).toString());
    console.log('reserves count before timelock:', reservesCount.toString());
    console.log('reserves count after execution:', (await pool.getReservesCount()).toString());
  });
};

job();
