import hre from 'hardhat';
import assert from 'assert';
import { getTimelock, prepareTimelockData } from '../prepare-timelock';
import { mockExecuteTimelock } from '../mock-exec-timelock';

const job = async () => {
  assert(hre.network.name === 'mainnet' || hre.network.name === 'hardhat', 'not mainnet');
  console.log('using network', hre.network.name);
  const timelock = await getTimelock('0x00000Ab6Ee5A6c1a7Ac819b01190B020F7c6599d');

  const txs1 = [
    // update delay to 3 days
    await timelock.updateDelay.populateTransaction(86400 * 3),

    // add new listing contract as admin
    {
      to: '0x6C9E32e37F3377D1824304f80bD135be85f5C8c8',
      data: '0x22650caf000000000000000000000000b7f3c8c12a94caf61057c1e1909562691af2a69c',
    },
    {
      to: '0x984A0d2F68bE59FAD746A6d15B811Febf34461f4',
      data: '0x22650caf000000000000000000000000b7f3c8c12a94caf61057c1e1909562691af2a69c',
    },
    {
      to: '0x749dF84Fd6DE7c0A67db3827e5118259ed3aBBa5',
      data: '0x22650caf000000000000000000000000b7f3c8c12a94caf61057c1e1909562691af2a69c',
    },

    // listing of stUSDA
    {
      to: '0xB7f3c8C12a94Caf61057C1e1909562691aF2A69c',
      data: '0x107eef45000000000000000000000000e3c3c5ead58fc2bed4e577e38985b8f7f1ddff00000000000000000000000000000000000000000000000000000000000000018000000000000000000000000008e8ec507968185efb94efd2d355f9932a0f75510000000000000000000000000022228a2cc5e7ef0274a7baa600d44da5ab57760000000000000000000000000000000000000000000000000000000000002328000000000000000000000000000000000000000000000000000000000000251c00000000000000000000000000000000000000000000000000000000000028a0000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000001e848000000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000003fafa5171dee3c3341a12942593199644983e16a00000000000000000000000090aa23e0eeeeedf398a1d5cca7fb3e47b75b055c0000000000000000000000007b9d0d6406a2274bec6f35c15f860cc66fbbff1100000000000000000000000000000000000000000000000000000000000000120000000000000000000000006b534c6904ee137b021490622a24c8fff89f5a630000000000000000000000000022228a2cc5e7ef0274a7baa600d44da5ab57760000000000000000000000004e88e72bd81c7ea394cb410296d99987c3a242fe000000000000000000000000bc2fdc58e3e06d265b46e32771442b7f5098725b00000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000360000000000000000000000000000000000000000000000000000000000000000e5a65726f4c656e6420737455534400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000077a30737455534400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f5a65726f4c656e64207a6b205661726961626c6520446562742073745553440000000000000000000000000000000000000000000000000000000000000000137661726961626c65446562747a30737455534400000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d5a65726f4c656e64207a6b20537461626c6520446562742073745553440000000000000000000000000000000000000000000000000000000000000000000011737461626c65446562747a30737455534400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000',
    },
    // // listing of USD0++ PT
    // {
    //   to: '0xB7f3c8C12a94Caf61057C1e1909562691aF2A69c',
    //   data: '0x107eef45000000000000000000000000e3c3c5ead58fc2bed4e577e38985b8f7f1ddff000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000ad55b868d30866457aaedc65e1c3cdfa098f4ac20000000000000000000000005bae9a5d67d1ca5b09b14c91935f635cfbf3b6850000000000000000000000000000000000000000000000000000000000002328000000000000000000000000000000000000000000000000000000000000251c00000000000000000000000000000000000000000000000000000000000028a00000000000000000000000000000000000000000000000000000000000989680000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000003fafa5171dee3c3341a12942593199644983e16a00000000000000000000000090aa23e0eeeeedf398a1d5cca7fb3e47b75b055c0000000000000000000000007b9d0d6406a2274bec6f35c15f860cc66fbbff1100000000000000000000000000000000000000000000000000000000000000120000000000000000000000006b534c6904ee137b021490622a24c8fff89f5a630000000000000000000000005bae9a5d67d1ca5b09b14c91935f635cfbf3b6850000000000000000000000004e88e72bd81c7ea394cb410296d99987c3a242fe000000000000000000000000bc2fdc58e3e06d265b46e32771442b7f5098725b00000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000000185a65726f4c656e64205054555344302b2b4d617232373234000000000000000000000000000000000000000000000000000000000000000000000000000000117a305054555344302b2b4d61723237323400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000295a65726f4c656e64207a6b205661726961626c652044656274205054555344302b2b4d6172323732340000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d7661726961626c65446562747a305054555344302b2b4d61723237323400000000000000000000000000000000000000000000000000000000000000000000275a65726f4c656e64207a6b20537461626c652044656274205054555344302b2b4d61723237323400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b737461626c65446562747a305054555344302b2b4d617232373234000000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000',
    // },
  ];

  const tx = await prepareTimelockData(txs1, timelock.target);
  const pool = await hre.ethers.getContractAt('Pool', '0xD3a4DA66EC15a001466F324FA08037f3272BDbE8');
  const reservesCount = await pool.getReservesCount();

  await mockExecuteTimelock(tx.schedule, tx.execute, 86400 * 5, 'mainnet', async () => {
    // now stUSDA & USD0++ PT must be listed
    console.log('timelock delay after execution:', (await timelock.getMinDelay()).toString());
    console.log('reserves count before timelock:', reservesCount.toString());
    console.log('reserves count after execution:', (await pool.getReservesCount()).toString());
  });
};

job();
