// the listing of zksync tokens
// schedule https://era.zksync.network/tx/0xc5512e4ecc4046cb97691919123e81669926aa3b29f5f74f60f47b1962416f61
// execute https://era.zksync.network/tx/0xceb504b97355b0d0a72f2588307caa913fe0b5d2989a24809541fbd483ae4b3e

import hre from 'hardhat';
import assert from 'assert';
import { getTimelock, prepareTimelockData } from '../prepare-timelock';
import { mockExecuteTimelock } from '../mock-exec-timelock';
import { ContractTransaction } from 'ethers';

const job = async () => {
  assert(
    hre.network.name === 'zksync' ||
      hre.network.name === 'hardhat' ||
      hre.network.name === 'tenderly',
    'not mainnet'
  );
  console.log('using network', hre.network.name);
  const timelock = await getTimelock(hre, '0x861cC6724D0aA7Ec7a868887643e682b1c16aeeC');
  const safe = '0x1890F9204882dfa1B8f0AEaF56ae9b2ed149D18d';
  const pool = await hre.ethers.getContractAt('Pool', '0x4d9429246EA989C9CeE203B43F6d1C7D83e3B8F8');
  const txs: ContractTransaction[] = [];

  // listing of zk token
  txs.push({
    to: '0x35cD64fD9b22D864bD166e0fFc1474F6090209AB',
    data: '0x107eef450000000000000000000000004f285ea117ef0067b59853d6d16a5de8088ba2590000000000000000000000000000000000000000000000000000000000000180000000000000000000000000d1ce60dc8ae060ddd17ca8716c96f193bc88dd130000000000000000000000005a7d6b2f92c77fad6ccabd7ee0624e64907eaf3e0000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000021340000000000000000000000000000000000000000000000000000000000002904000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000e8178ff950ea1b69a51ce961c542a4cc6cb6e38e000000000000000000000000a04222ccb20e8b6cc2a45856e7f6ef14995bbdb9000000000000000000000000a48acc9847cc1dd2cada05151c9a78ba47a305cb0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000caa502e289bfb924732f44f5e70bd08fc052aab80000000000000000000000005a7d6b2f92c77fad6ccabd7ee0624e64907eaf3e0000000000000000000000001890f9204882dfa1b8f0aeaf56ae9b2ed149d18d00000000000000000000000054ab34ab3c723bd2674c7082aa6ffcdfd3a5bedc00000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000360000000000000000000000000000000000000000000000000000000000000000f5a65726f4c656e64205a4b73796e63000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047a305a4b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c5a65726f4c656e64207a6b205661726961626c652044656274205a4b0000000000000000000000000000000000000000000000000000000000000000000000107661726961626c65446562747a305a4b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a5a65726f4c656e64207a6b20537461626c652044656274205a4b000000000000000000000000000000000000000000000000000000000000000000000000000e737461626c65446562747a305a4b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000',
  });

  // listing of MBTC token
  txs.push({
    to: '0x35cD64fD9b22D864bD166e0fFc1474F6090209AB',
    data: '0x107eef450000000000000000000000004f285ea117ef0067b59853d6d16a5de8088ba25900000000000000000000000000000000000000000000000000000000000001800000000000000000000000004cba285c15e3b540c474a114a7b135193e4f1ea6000000000000000000000000e757355edba7ced7b8c0271bba4efda184ad75ab0000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000021340000000000000000000000000000000000000000000000000000000000002904000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000e8178ff950ea1b69a51ce961c542a4cc6cb6e38e000000000000000000000000a04222ccb20e8b6cc2a45856e7f6ef14995bbdb9000000000000000000000000a48acc9847cc1dd2cada05151c9a78ba47a305cb0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000caa502e289bfb924732f44f5e70bd08fc052aab8000000000000000000000000e757355edba7ced7b8c0271bba4efda184ad75ab0000000000000000000000001890f9204882dfa1b8f0aeaf56ae9b2ed149d18d00000000000000000000000054ab34ab3c723bd2674c7082aa6ffcdfd3a5bedc00000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000000135a65726f4c656e64204d65726c696e204254430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000077a304d2d42544300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f5a65726f4c656e64207a6b205661726961626c652044656274204d2d4254430000000000000000000000000000000000000000000000000000000000000000137661726961626c65446562747a304d2d42544300000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d5a65726f4c656e64207a6b20537461626c652044656274204d2d4254430000000000000000000000000000000000000000000000000000000000000000000011737461626c65446562747a304d2d42544300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000',
  });

  // listing of native USDC token
  txs.push({
    to: '0x35cD64fD9b22D864bD166e0fFc1474F6090209AB',
    data: '0x107eef450000000000000000000000004f285ea117ef0067b59853d6d16a5de8088ba25900000000000000000000000000000000000000000000000000000000000001800000000000000000000000001824d297c6d6d311a204495277b63e943c2d376e0000000000000000000000001d17cbcf0d6d143135ae902365d2e5e2a16538d40000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000021340000000000000000000000000000000000000000000000000000000000002904000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000e8178ff950ea1b69a51ce961c542a4cc6cb6e38e000000000000000000000000a04222ccb20e8b6cc2a45856e7f6ef14995bbdb9000000000000000000000000a48acc9847cc1dd2cada05151c9a78ba47a305cb0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000caa502e289bfb924732f44f5e70bd08fc052aab80000000000000000000000001d17cbcf0d6d143135ae902365d2e5e2a16538d40000000000000000000000001890f9204882dfa1b8f0aeaf56ae9b2ed149d18d00000000000000000000000054ab34ab3c723bd2674c7082aa6ffcdfd3a5bedc00000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000360000000000000000000000000000000000000000000000000000000000000000d5a65726f4c656e6420555344430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067a30555344430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e5a65726f4c656e64207a6b205661726961626c6520446562742055534443000000000000000000000000000000000000000000000000000000000000000000127661726961626c65446562747a30555344430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c5a65726f4c656e64207a6b20537461626c6520446562742055534443000000000000000000000000000000000000000000000000000000000000000000000010737461626c65446562747a30555344430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000',
  });

  const reservesCount = await pool.getReservesList();
  console.log('reserves count', reservesCount.length);

  const tx = await prepareTimelockData(hre, safe, txs, timelock.target);

  await mockExecuteTimelock(tx.schedule, tx.execute, 86400 * 5, 'zksync', async () => {
    const reservesCountAfter = await pool.getReservesList();
    console.log('reserves count after', reservesCountAfter.length);
  });
};

job();
