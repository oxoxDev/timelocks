// Do the listing of LBTC Mar PT, pumpBTC & eBTC Mar PT on mainnet btc
// scheduled: https://etherscan.io/tx/0x90f0d5f6d822a493898dcd6c6b6ecbd00f02a22bfca7f7f33a2c6cac4a3f7e99

import hre from 'hardhat';
import assert from 'assert';
import { getTimelock, prepareTimelockData } from '../prepare-timelock';
import { mockExecuteTimelock } from '../mock-exec-timelock';
import { ContractTransaction } from 'ethers';

const job = async () => {
  assert(
    hre.network.name === 'mainnet' ||
      hre.network.name === 'hardhat' ||
      hre.network.name === 'tenderly',
    'not mainnet'
  );
  console.log('using network', hre.network.name);
  const timelock = await getTimelock(hre, '0x00000Ab6Ee5A6c1a7Ac819b01190B020F7c6599d');
  const safe = '0x4e88e72bd81c7ea394cb410296d99987c3a242fe';
  const pool = await hre.ethers.getContractAt('Pool', '0xD3a4DA66EC15a001466F324FA08037f3272BDbE8');

  const txs: ContractTransaction[] = [];

  // listing of sUSDe
  txs.push({
    to: '0x43CcF5E5F694E15Ec159bC7112c6119bac84f79e',
    data: '0x107eef45000000000000000000000000e3c3c5ead58fc2bed4e577e38985b8f7f1ddff000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000ff3bc18ccbd5999ce63e788a1c250a88626ad0990000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a34970000000000000000000000000000000000000000000000000000000000001d4c0000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000002af800000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000000000004c4b4000000000000000000000000000000000000000000000000000000000002faf0800000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000003fafa5171dee3c3341a12942593199644983e16a00000000000000000000000090aa23e0eeeeedf398a1d5cca7fb3e47b75b055c0000000000000000000000007b9d0d6406a2274bec6f35c15f860cc66fbbff1100000000000000000000000000000000000000000000000000000000000000120000000000000000000000006b534c6904ee137b021490622a24c8fff89f5a630000000000000000000000009d39a5de30e57443bff2a8307a4256c8797a34970000000000000000000000004e88e72bd81c7ea394cb410296d99987c3a242fe000000000000000000000000bc2fdc58e3e06d265b46e32771442b7f5098725b00000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000000145a65726f4c656e64205374616b6564205553446500000000000000000000000000000000000000000000000000000000000000000000000000000000000000077a30735553446500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f5a65726f4c656e64207a6b205661726961626c6520446562742073555344650000000000000000000000000000000000000000000000000000000000000000137661726961626c65446562747a30735553446500000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d5a65726f4c656e64207a6b20537461626c6520446562742073555344650000000000000000000000000000000000000000000000000000000000000000000011737461626c65446562747a30735553446500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000',
  });

  // listing of USDe
  txs.push({
    to: '0x43CcF5E5F694E15Ec159bC7112c6119bac84f79e',
    data: '0x107eef45000000000000000000000000e3c3c5ead58fc2bed4e577e38985b8f7f1ddff000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000a569d910839ae8865da8f8e70fffb0cba869f9610000000000000000000000004c9edd5852cd905f086c759e8383e09bff1e68b30000000000000000000000000000000000000000000000000000000000002328000000000000000000000000000000000000000000000000000000000000251c00000000000000000000000000000000000000000000000000000000000028a000000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000000000004c4b4000000000000000000000000000000000000000000000000000000000002faf0800000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000003fafa5171dee3c3341a12942593199644983e16a00000000000000000000000090aa23e0eeeeedf398a1d5cca7fb3e47b75b055c0000000000000000000000007b9d0d6406a2274bec6f35c15f860cc66fbbff1100000000000000000000000000000000000000000000000000000000000000120000000000000000000000006b534c6904ee137b021490622a24c8fff89f5a630000000000000000000000004c9edd5852cd905f086c759e8383e09bff1e68b30000000000000000000000004e88e72bd81c7ea394cb410296d99987c3a242fe000000000000000000000000bc2fdc58e3e06d265b46e32771442b7f5098725b00000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000360000000000000000000000000000000000000000000000000000000000000000d5a65726f4c656e6420555344650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067a30555344650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e5a65726f4c656e64207a6b205661726961626c6520446562742055534465000000000000000000000000000000000000000000000000000000000000000000127661726961626c65446562747a30555344650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c5a65726f4c656e64207a6b20537461626c6520446562742055534465000000000000000000000000000000000000000000000000000000000000000000000010737461626c65446562747a30555344650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000',
  });

  // listing of syrupUSD
  txs.push({
    to: '0x43CcF5E5F694E15Ec159bC7112c6119bac84f79e',
    data: '0x107eef45000000000000000000000000e3c3c5ead58fc2bed4e577e38985b8f7f1ddff00000000000000000000000000000000000000000000000000000000000000018000000000000000000000000008e8ec507968185efb94efd2d355f9932a0f755100000000000000000000000080ac24aa929eaf5013f6436cda2a7ba190f5cc0b0000000000000000000000000000000000000000000000000000000000002328000000000000000000000000000000000000000000000000000000000000251c00000000000000000000000000000000000000000000000000000000000028a000000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000000000004c4b4000000000000000000000000000000000000000000000000000000000002faf0800000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000003fafa5171dee3c3341a12942593199644983e16a00000000000000000000000090aa23e0eeeeedf398a1d5cca7fb3e47b75b055c0000000000000000000000007b9d0d6406a2274bec6f35c15f860cc66fbbff1100000000000000000000000000000000000000000000000000000000000000060000000000000000000000006b534c6904ee137b021490622a24c8fff89f5a6300000000000000000000000080ac24aa929eaf5013f6436cda2a7ba190f5cc0b0000000000000000000000004e88e72bd81c7ea394cb410296d99987c3a242fe000000000000000000000000bc2fdc58e3e06d265b46e32771442b7f5098725b00000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000000135a65726f4c656e64205379727570205553444300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b7a3073797275705553444300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000235a65726f4c656e64207a6b205661726961626c65204465627420737972757055534443000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000177661726961626c65446562747a3073797275705553444300000000000000000000000000000000000000000000000000000000000000000000000000000000215a65726f4c656e64207a6b20537461626c65204465627420737972757055534443000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015737461626c65446562747a30737972757055534443000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000',
  });

  // listing of stkGHO
  txs.push({
    to: '0x43CcF5E5F694E15Ec159bC7112c6119bac84f79e',
    data: '0x107eef45000000000000000000000000e3c3c5ead58fc2bed4e577e38985b8f7f1ddff00000000000000000000000000000000000000000000000000000000000000018000000000000000000000000008e8ec507968185efb94efd2d355f9932a0f75510000000000000000000000001a88df1cfe15af22b3c4c783d4e6f7f9e0c1885d0000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000000213400000000000000000000000000000000000000000000000000000000000028a000000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000000000004c4b4000000000000000000000000000000000000000000000000000000000002faf0800000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000003fafa5171dee3c3341a12942593199644983e16a00000000000000000000000090aa23e0eeeeedf398a1d5cca7fb3e47b75b055c0000000000000000000000007b9d0d6406a2274bec6f35c15f860cc66fbbff1100000000000000000000000000000000000000000000000000000000000000120000000000000000000000006b534c6904ee137b021490622a24c8fff89f5a630000000000000000000000001a88df1cfe15af22b3c4c783d4e6f7f9e0c1885d0000000000000000000000004e88e72bd81c7ea394cb410296d99987c3a242fe000000000000000000000000bc2fdc58e3e06d265b46e32771442b7f5098725b00000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000000105a65726f4c656e642073746b2047484f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000087a3073746b47484f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000205a65726f4c656e64207a6b205661726961626c6520446562742073746b47484f00000000000000000000000000000000000000000000000000000000000000147661726961626c65446562747a3073746b47484f000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e5a65726f4c656e64207a6b20537461626c6520446562742073746b47484f00000000000000000000000000000000000000000000000000000000000000000012737461626c65446562747a3073746b47484f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000',
  });

  const tx = await prepareTimelockData(hre, safe, txs, timelock.target);
  const reservesCount = await pool.getReservesCount();

  console.log('reserves count', reservesCount.toString());
  await mockExecuteTimelock(tx.schedule, tx.execute, 86400 * 3, 'mainnet', async () => {
    const reservesCountAfter = await pool.getReservesCount();
    console.log('reserves count after', reservesCountAfter.toString());
  });
};

job();
