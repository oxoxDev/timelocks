// Do the listing of sUSD and yUSD
// scheduled

import hre from 'hardhat';
import assert from 'assert';
import { getTimelock, prepareTimelockData } from '../prepare-timelock';
import { mockExecuteTimelock } from '../mock-exec-timelock';
import { ContractTransaction } from 'ethers';

const job = async () => {
  assert(
    hre.network.name === 'mainnet' ||
      hre.network.name === 'hardhat' ||
      hre.network.name === 'tenderly',
    'not mainnet'
  );
  console.log('using network', hre.network.name);
  const timelock = await getTimelock(hre, '0x00000Ab6Ee5A6c1a7Ac819b01190B020F7c6599d');
  const safe = '0x4e88e72bd81c7ea394cb410296d99987c3a242fe';
  const pool = await hre.ethers.getContractAt('Pool', '0xD3a4DA66EC15a001466F324FA08037f3272BDbE8');

  const txs: ContractTransaction[] = [];

  // sUSD
  txs.push({
    to: '0x43CcF5E5F694E15Ec159bC7112c6119bac84f79e',
    data: '0x107eef45000000000000000000000000e3c3c5ead58fc2bed4e577e38985b8f7f1ddff00000000000000000000000000000000000000000000000000000000000000018000000000000000000000000008e8ec507968185efb94efd2d355f9932a0f75510000000000000000000000004f8e1426a9d10bddc11d26042ad270f16ccb95f20000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000000213400000000000000000000000000000000000000000000000000000000000028a000000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000007a12000000000000000000000000000000000000000000000000000000000000186a00000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000003fafa5171dee3c3341a12942593199644983e16a00000000000000000000000090aa23e0eeeeedf398a1d5cca7fb3e47b75b055c0000000000000000000000007b9d0d6406a2274bec6f35c15f860cc66fbbff1100000000000000000000000000000000000000000000000000000000000000120000000000000000000000006b534c6904ee137b021490622a24c8fff89f5a630000000000000000000000004f8e1426a9d10bddc11d26042ad270f16ccb95f20000000000000000000000004e88e72bd81c7ea394cb410296d99987c3a242fe000000000000000000000000bc2fdc58e3e06d265b46e32771442b7f5098725b00000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000360000000000000000000000000000000000000000000000000000000000000001d5a65726f4c656e64205969656c64466920537461626c6520546f6b656e00000000000000000000000000000000000000000000000000000000000000000000067a30735553440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e5a65726f4c656e64207a6b205661726961626c6520446562742073555344000000000000000000000000000000000000000000000000000000000000000000127661726961626c65446562747a30735553440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c5a65726f4c656e64207a6b20537461626c6520446562742073555344000000000000000000000000000000000000000000000000000000000000000000000010737461626c65446562747a30735553440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000',
  });

  // yUSD
  txs.push({
    to: '0x43CcF5E5F694E15Ec159bC7112c6119bac84f79e',
    data: '0x107eef45000000000000000000000000e3c3c5ead58fc2bed4e577e38985b8f7f1ddff00000000000000000000000000000000000000000000000000000000000000018000000000000000000000000008e8ec507968185efb94efd2d355f9932a0f75510000000000000000000000001ce7d9942ff78c328a4181b9f3826fee6d845a970000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000000213400000000000000000000000000000000000000000000000000000000000028a000000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000007a12000000000000000000000000000000000000000000000000000000000000186a00000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000003fafa5171dee3c3341a12942593199644983e16a00000000000000000000000090aa23e0eeeeedf398a1d5cca7fb3e47b75b055c0000000000000000000000007b9d0d6406a2274bec6f35c15f860cc66fbbff1100000000000000000000000000000000000000000000000000000000000000120000000000000000000000006b534c6904ee137b021490622a24c8fff89f5a630000000000000000000000001ce7d9942ff78c328a4181b9f3826fee6d845a970000000000000000000000004e88e72bd81c7ea394cb410296d99987c3a242fe000000000000000000000000bc2fdc58e3e06d265b46e32771442b7f5098725b00000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000000175a65726f4c656e64205969656c6446692079546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000067a30795553440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e5a65726f4c656e64207a6b205661726961626c6520446562742079555344000000000000000000000000000000000000000000000000000000000000000000127661726961626c65446562747a30795553440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c5a65726f4c656e64207a6b20537461626c6520446562742079555344000000000000000000000000000000000000000000000000000000000000000000000010737461626c65446562747a30795553440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000',
  });

  const tx = await prepareTimelockData(hre, safe, txs, timelock.target);
  const reservesCount = await pool.getReservesCount();

  console.log('reserves count', reservesCount.toString());
  await mockExecuteTimelock(tx.schedule, tx.execute, 86400 * 5, 'mainnet', async () => {
    const reservesCountAfter = await pool.getReservesCount();
    console.log('reserves count after', reservesCountAfter.toString());
  });
};

job();
