// list new assets onto the base market
// fix oracle for cbETH PT

import hre from 'hardhat';
import assert from 'assert';
import { getTimelock, prepareTimelockData } from '../prepare-timelock';
import { mockExecuteTimelock } from '../mock-exec-timelock';
import { ContractTransaction } from 'ethers';

const job = async () => {
  assert(
    hre.network.name === 'base' ||
      hre.network.name === 'hardhat' ||
      hre.network.name === 'tenderly',
    'not mainnet'
  );
  console.log('using network', hre.network.name);
  const timelock = await getTimelock(hre, '0x00000Ab6Ee5A6c1a7Ac819b01190B020F7c6599d');
  const safe = '0x6F5Ae60d89dbbc4EeD4B08d08A68dD5679Ac61B4';

  const oracle = await hre.ethers.getContractAt(
    'AaveOracle',
    '0xF49Ee3EA9C56D90627881d88004aaBDFc44Fd82c'
  );
  const txs: ContractTransaction[] = [];

  // listing of USR
  txs.push({
    to: '0x76D34c6794Bdb511eFf788585F10a1007D474Dc6',
    data: '0x107eef450000000000000000000000005213ab3997a596c75ac6ebf81f8aeb9cf9a3100700000000000000000000000000000000000000000000000000000000000001800000000000000000000000004891e12e4b341ec90e4e0379d1b7364b5b11cb5800000000000000000000000035e5db674d8e93a03d814fa0ada70731efe8a4b90000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000000200800000000000000000000000000000000000000000000000000000000000028a000000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000007a12000000000000000000000000000000000000000000000000000000000000186a00000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000e230cf9cee7b299f69778ef950a61de0de520ba70000000000000000000000005d50be703836c330fc2d147a631cdd7bb8d7171c000000000000000000000000cbdc0aed7cdf2472784068abef23a902cafabb980000000000000000000000000000000000000000000000000000000000000012000000000000000000000000795b70fd08a538598e19a927f5400febfaeb92c700000000000000000000000035e5db674d8e93a03d814fa0ada70731efe8a4b90000000000000000000000006f5ae60d89dbbc4eed4b08d08a68dd5679ac61b400000000000000000000000073a7a4b40f3fe11e0bcab5538c75d3b984082cae00000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000000135a65726f4c656e64205265736f6c76205553440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000057a30555352000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d5a65726f4c656e64207a6b205661726961626c6520446562742055535200000000000000000000000000000000000000000000000000000000000000000000117661726961626c65446562747a30555352000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b5a65726f4c656e64207a6b20537461626c652044656274205553520000000000000000000000000000000000000000000000000000000000000000000000000f737461626c65446562747a30555352000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000',
  });

  // update cbETH PT oracle
  txs.push({
    to: oracle.target.toString(),
    data: oracle.interface.encodeFunctionData('setAssetSources', [
      ['0xE46c8bA948f8071b425a1f7Ba45c0a65CBAcea2e'],
      ['0x3f538b74a7ED0aC854A4cee6eb15bF6BAa3d37C7'],
    ]),
  });

  const tx = await prepareTimelockData(hre, safe, txs, timelock.target);
  // const reservesCount = await pool.getReservesCount();
  // console.log('reserves count', reservesCount.toString());
  await mockExecuteTimelock(tx.schedule, tx.execute, 86400 * 5, 'base', async () => {
    // const reservesCountAfter = await pool.getReservesCount();
    // console.log('reserves count after', reservesCountAfter.toString());
  });
};

job();
