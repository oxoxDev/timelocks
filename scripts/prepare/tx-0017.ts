// list new assets onto the rwa market

import hre from 'hardhat';
import assert from 'assert';
import { getTimelock, prepareTimelockData } from '../prepare-timelock';
import { mockExecuteTimelock } from '../mock-exec-timelock';
import { ContractTransaction } from 'ethers';

const job = async () => {
  assert(
    hre.network.name === 'mainnet' ||
      hre.network.name === 'hardhat' ||
      hre.network.name === 'tenderly',
    'not mainnet'
  );
  console.log('using network', hre.network.name);
  const timelock = await getTimelock(hre, '0x00000Ab6Ee5A6c1a7Ac819b01190B020F7c6599d');
  const safe = '0x6F5Ae60d89dbbc4EeD4B08d08A68dD5679Ac61B4';

  const txs: ContractTransaction[] = [];

  // listing of USR
  txs.push({
    to: '0x43CcF5E5F694E15Ec159bC7112c6119bac84f79e',
    data: '0x107eef45000000000000000000000000e3c3c5ead58fc2bed4e577e38985b8f7f1ddff0000000000000000000000000000000000000000000000000000000000000001800000000000000000000000008738b2912ea53b3d43348a138bc8ad3bb145f6c900000000000000000000000066a1e37c9b0eaddca17d3662d6c05f4decf3e1100000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000000200800000000000000000000000000000000000000000000000000000000000028a000000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000007a12000000000000000000000000000000000000000000000000000000000000186a00000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000003fafa5171dee3c3341a12942593199644983e16a00000000000000000000000090aa23e0eeeeedf398a1d5cca7fb3e47b75b055c0000000000000000000000007b9d0d6406a2274bec6f35c15f860cc66fbbff1100000000000000000000000000000000000000000000000000000000000000120000000000000000000000006b534c6904ee137b021490622a24c8fff89f5a6300000000000000000000000066a1e37c9b0eaddca17d3662d6c05f4decf3e1100000000000000000000000004e88e72bd81c7ea394cb410296d99987c3a242fe000000000000000000000000bc2fdc58e3e06d265b46e32771442b7f5098725b00000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000000135a65726f4c656e64205265736f6c76205553440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000057a30555352000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d5a65726f4c656e64207a6b205661726961626c6520446562742055535200000000000000000000000000000000000000000000000000000000000000000000117661726961626c65446562747a30555352000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b5a65726f4c656e64207a6b20537461626c652044656274205553520000000000000000000000000000000000000000000000000000000000000000000000000f737461626c65446562747a30555352000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000',
  });

  const tx = await prepareTimelockData(hre, safe, txs, timelock.target);
  // const reservesCount = await pool.getReservesCount();
  // console.log('reserves count', reservesCount.toString());
  await mockExecuteTimelock(tx.schedule, tx.execute, 86400 * 5, 'mainnet', async () => {
    // const reservesCountAfter = await pool.getReservesCount();
    // console.log('reserves count after', reservesCountAfter.toString());
  });
};

job();
